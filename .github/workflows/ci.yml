name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    if: startsWith(github.event.head_commit.message, 'apply')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: |
          if [ -f package-lock.json ]; then npm ci; else npm install; fi

      - name: Lint
        if: ${{ hashFiles('**/package.json') }}
        run: |
          if grep -q "\"lint\"" package.json; then npm run lint; else echo "No lint script"; fi

      - name: Run tests
        run: |
          if grep -q "\"test\"" package.json; then npm test; else echo "No test script"; fi

  
  build-and-push-on-ECR:
    runs-on: ubuntu-latest
    needs: build-and-test
    env:
      AWS_REGION: us-east-1
      ECR_REPOSITORY: 654654545585.dkr.ecr.us-east-1.amazonaws.com/mario/konecta
      IMAGE_TAG: latest

    steps:
      
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: ecr-login
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPOSITORY

      - name: Build Docker image
        run: |
          docker build -f Dockerfile.lambda -t $ECR_REPOSITORY:$IMAGE_TAG .

      - name: Push Docker image
        run: |
          docker push $ECR_REPOSITORY:$IMAGE_TAG

  trivy-scan:
    name: Trivy Security Scan
    needs: build-and-push-on-ECR
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Trivy
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs   # options: fs (filesystem), image, repo
          severity: CRITICAL,HIGH
          format: table
          # exit-code: 1    # fail if vulnerabilities found
          ignore-unfixed: true

  terraform:
    # if: startsWith(github.event.head_commit.message, 'terraform apply')
    runs-on: ubuntu-latest
    needs: trivy-scan
    defaults:
      run:
        working-directory: terraform

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.7.5
          cli_config_credentials_token: ${{ secrets.TFC_TOKEN }}

      - name: Terraform Init & Apply
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          TF_API_TOKEN_app_terraform_io: ${{ secrets.TFC_TOKEN }}
        run: |
          terraform init
          terraform apply --auto-approve